#! /usr/bin/python3
## -*- coding: utf-8 -*-
"""Qt –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è forget-me-not."""
import sys
from pathlib import Path
from datetime import datetime
from PyQt5 import QtWidgets, QtGui
from PyQt5 import uic

import c_config as cfg
import c_constants as const
import c_database as db
import c_eventslist as evlst
import c_eventtypeslist as evtypelst
import c_tools as tls

# ToDo: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø –±–∞–∑—ã

class CMainWindow(QtWidgets.QMainWindow):
    """–ö–ª–∞—Å—Å."""
    def __init__(self):
        """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞."""
        super(CMainWindow, self).__init__()
        self.application_folder = Path.cwd()
        uic.loadUi(self.application_folder / const.FORMS_FOLDER / const.MAIN_WINDOW_FORM, self)
        text_font = QtGui.QFont()
        text_font.setPointSize(text_font.pointSize()+3)
        self.textBrowser.setFont(text_font)        
        self.actionEventsList.triggered.connect(self.__event_list_show)
        self.actionOpenDatabase.triggered.connect(self.__open_database)
        self.actionEventTypesList.triggered.connect(self.__event_type_list_show)
        self.config = cfg.CConfiguration()
        
        self.database = db.CDatabase(self.config)
        if not self.__is_database_exists():
        
            self.database.create_database()
        self.database.cleanup()
        self.backup_need = False
        self.update()
        self.show()
  

    def __backup(self):
        """–§—É–Ω–∫—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î."""
        self.database.disconnect_from_database()
        new_filename = f"forget-me-not_{datetime.now():%Y%m%d_%H%M}"

        
        
    def __display_content(self, pactual_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤—ã–±–æ—Ä–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –≤–∏–¥–∂–µ—Ç."""
        # *** –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        css_style = "<style>\n"
        event_type_objects_list = self.database.get_event_types_objects_list()
        for event_type in event_type_objects_list:
            
            css_style += f".style_{event_type.id} {{ color: {event_type.fcolor}; }}\n"
        
        css_style += "</style>"
        # *** –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–¥–æ–∫—É–º–µ–Ω—Ç
        html_document = f"""<html>\n
                              <head>\n
                                {css_style}
                              </head>\n
                                <body>\n
                                  <table>\n"""
                                 
        content = ""
        for row in pactual_data:
            
            content += self.__make_html_row(row)
        
        html_document += f"""     {content}    
                                </table>\n
                              </body>\n
                            </html>"""
        self.textBrowser.setStyleSheet("background-color: #3F3F3F;")
        self.textBrowser.insertHtml(html_document)
        

    def __event_list_show(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π."""
        window = evlst.CEventList(pparent=self, 
                                  pdatabase=self.database, 
                                  papplication_folder=self.application_folder)
   

    def __event_type_list_show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π."""
        
        window = evtypelst.CEventTypesList(pparent=self, 
                                           pdatabase=self.database, 
                                           papplication_folder=self.application_folder)


    def __is_database_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        config_folder_path = Path(self.config.restore_value(cfg.DATABASE_FILE_KEY))
        return config_folder_path.exists()


    def __load_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ."""

        def sort_list(x):
            
            delta=datetime.now().date() - x[db.EVENT_LIST_CONVERTED_DATE_FIELD]
            return delta.days

        full_data = []
        db_month_data = self.database.get_actual_monthly_events()
        full_data.extend(db_month_data)
        db_year_data = self.database.get_actual_yearly_events()
        full_data.extend(db_year_data)
        db_one_shot_data = self.database.get_actual_one_shot_events()
        full_data.extend(db_one_shot_data)
        sorted_data = sorted(full_data, key=sort_list)
        return(sorted_data)


    def __make_html_row(self, data_row):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É HTML —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        type_id = data_row[db.EVENT_LIST_CONVERTED_TYPE_ID_FIELD]
        emodji = data_row[db.EVENT_LIST_CONVERTED_TYPE_EMODJI_FIELD]
        type_name = data_row[db.EVENT_LIST_CONVERTED_TYPE_NAME_FIELD]
        event_date = data_row[db.EVENT_LIST_CONVERTED_DATE_FIELD]
        event_name = data_row[db.EVENT_LIST_CONVERTED_NAME_FIELD]
        if event_date == tls.shift_date(datetime.now(), 1).date():
            
            time_mark = "‚ñ≤"  # "üëÜ‚¨ÜÔ∏è" # "üîº" # ‚ñ≤‚ñ∫‚ñº
        elif event_date == datetime.now().date():

            # color_mark = self.config.restore_value(cfg.TODAY_COLOR_KEY)
            time_mark = "‚ñ∫"  # "üëâ‚û°Ô∏è" # "‚ñ∂Ô∏è" # 
        elif event_date == tls.shift_date(datetime.now(), -1).date():

            # color_mark = self.config.restore_value(cfg.YESTERDAY_COLOR_KEY)
            time_mark = "‚ñº"  # "üëá‚¨áÔ∏è" # "üîΩ" # 
        else:

            time_mark = "üïí"
        
        # if color_mark:

            # # html_row = f"<tr><td> <font color='{color_mark}'>{time_mark} {emodji} {type_name}{const.TYPE_SEPARATOR}{event_date:%d.%m.%Y} {event_name} "
            # html_row = f"<tr><td>{time_mark} {emodji} {type_name}{const.TYPE_SEPARATOR}{event_date:%d.%m.%Y} {event_name} "
        # else:
        
        html_row = f"<tr><td class='style_{type_id}'>{time_mark} {emodji} {type_name}{const.TYPE_SEPARATOR}{event_date:%d.%m.%Y} {event_name} "
        
        if (type_id == db.EVENT_TYPE_MEMORY_DAY) or (type_id == db.EVENT_TYPE_BIRTH_DAY) :
        
            html_row += data_row[db.EVENT_LIST_CONVERTED_MESSAGE_FIELD]
        html_row += "</td></tr>\n"
        return html_row
            

    def __open_database(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –µ–µ, –∫–∞–∫ –±–∞–∑—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        db_path = Path(self.config.restore_value(cfg.DATABASE_FILE_KEY)).parent
        selected_file = QtWidgets.QFileDialog.getOpenFileName(parent=self,
                                                              caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLITE",
                                                              directory=str(db_path),
                                                              filter="forget-me-not*.db"
                                                             )
        result = QtWidgets.QMessageBox.question(self,
                                                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?",
                                                buttons=QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                                defaultButton=QtWidgets.QMessageBox.No                            
                                                )
        if result==QtWidgets.QMessageBox.Yes:
            
            self.config.store_value(cfg.DATABASE_FILE_KEY, selected_file[0])
            self.config.write_config()
            self.database.disconnect_from_database()
            self.database.connect_to_database()
            self.update()


    def closeEvent(self, event):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        self.__backup()
        event.accept()

 
    def update(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
        self.textBrowser.clear()
        self.__display_content(self.__load_data())
        self.backup_need = True
        

if __name__ == '__main__':
    application = QtWidgets.QApplication(sys.argv)
    main_window = CMainWindow()
    application.exec_()


               #p {font-size: 16px;
                  #font-family: "%s";
                  #margin-right:50px;
                  #margin-left:50px;
                  #}
               #p1 {font-size: 16px;
                   #font-family: "%s";
                   #margin-right:50px;
                   #margin-left:50px;
                   #}
               #</style>
               #</head>
               #<body>
               #""" % (fontfamily, fontfamily)          
          
